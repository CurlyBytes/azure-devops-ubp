# Node.js Express Web App on Linux
# Build a Node.js Express app and deploy it as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

# disable the push trigger
trigger: none

variables:

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
      
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build --if-present
        npm run test --if-present
      displayName: 'npm install, build and test'
      
    - task: DownloadPipelineArtifact@1
      displayName: 'Download Pipeline Artifact'
      inputs:
        buildType: 'current'

    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy Staging'
      enabled: false
      inputs:
        azureSubscription: $(azureSubscription)
        WebAppName: $(stagingDemoWebapp)
        packageForLinux: $(System.ArtifactsDirectory)/drop/$(Build.BuildId).zip
        WebConfigParameters: '-Handler iisnode -NodeStartFile app.js -appType node'
        AppSettings: '-DEPLOYMENT_GROUP_NAME Staging -PROBLEM_NUMBER $(appProblemNumber)'

    - bash: 'pwd && ls -l'
      displayName: 'Bash Script'

    - task: Bash@3
      displayName: 'Dynatrace Deployment Event'
      inputs:
        targetType: filePath
        filePath: $(System.DefaultWorkingDirectory)/pipeline/dynatrace-deployment-event.sh
        arguments: '"$(dynatraceBaseUrl)" "$(dynatraceApiToken)" Staging $(Release.DefinitionName) $(Release.ReleaseId) $(System.TeamProject) $(System.TeamFoundationCollectionUri)'

    - task: PowerShell@2
      displayName: 'Capture Load Test Start Time'
      inputs:
        targetType: filePath
        filePath: $(System.DefaultWorkingDirectory)/pipeline/captureStartTime.ps1

    - task: Bash@3
      displayName: 'Load Test'
      inputs:
        targetType: filePath
        filePath: $(System.DefaultWorkingDirectory)/loadtest.sh
        arguments: 'Staging $(demoWebappStagingUrl) $(loadtestDurationSeconds)'

    - task: PowerShell@2
      displayName: 'Capture Load Test End Time'
      inputs:
        targetType: filePath
        filePath: $(System.DefaultWorkingDirectory)/pipeline/captureEndTime.ps1

    - task: PowerShell@2
      displayName: 'Quality Gate call to Pitometer'
      inputs:
        targetType: filePath
        filePath: $(System.DefaultWorkingDirectory)/pipeline/qualitygate.ps1
        arguments: '$env:startTime $env:endTime $(pitometerUrl) $(perfspecFile) $(fakeQualityGateStatus)'
